CREATE DATABASE IF NOT EXISTS RFM_SALES_DB;
USE RFM_SALES_DB;

CREATE TABLE SALES_DATA (
  ORDERNUMBER INT,
  QUANTITYORDERED DECIMAL(10,2),
  PRICEEACH DECIMAL(10,2),
  ORDERLINENUMBER INT,
  SALES DECIMAL(10,2),
  ORDERDATE VARCHAR(20),
  STATUS VARCHAR(20),
  QTR_ID INT,
  MONTH_ID INT,
  YEAR_ID INT,
  PRODUCTLINE VARCHAR(40),
  MSRP INT,
  PRODUCTCODE VARCHAR(20),
  CUSTOMERNAME VARCHAR(70),
  PHONE VARCHAR(30),
  ADDRESSLINE1 VARCHAR(80),
  ADDRESSLINE2 VARCHAR(80),
  CITY VARCHAR(30),
  STATE VARCHAR(30),
  POSTALCODE VARCHAR(20),
  COUNTRY VARCHAR(30),
  TERRITORY VARCHAR(30),
  CONTACTLASTNAME VARCHAR(30),
  CONTACTFIRSTNAME VARCHAR(30),
  DEALSIZE VARCHAR(15)
);




-- EXPLORING DATA
SELECT * FROM SALES_DATA LIMIT 5;
SELECT COUNT(*) As ROW_COUNT FROM SALES_DATA ; -- 2823 ROWS

-- Exploring unique values
SELECT DISTINCT YEAR_ID FROM SALES_DATA;
SELECT DISTINCT STATUS FROM SALES_DATA;
SELECT DISTINCT PRODUCTLINE FROM SALES_DATA;
SELECT DISTINCT COUNTRY FROM SALES_DATA;
SELECT DISTINCT DEALSIZE FROM SALES_DATA;
SELECT DISTINCT TERRITORY FROM SALES_DATA;
SELECT DISTINCT CITY FROM SALES_DATA;
SELECT DISTINCT STATE FROM SALES_DATA;

-- Check available months in a specific year
SELECT DISTINCT MONTH_ID 
FROM SALES_DATA
WHERE YEAR_ID = 2003
ORDER BY MONTH_ID;

-- Total revenue per year
SELECT YEAR_ID, SUM(SALES) AS REVENUE
FROM SALES_DATA
GROUP BY YEAR_ID
ORDER BY REVENUE;

-- Revenue & order count by product line
SELECT 
     PRODUCTLINE,
     ROUND(SUM(SALES),0) AS REVENUE,
     COUNT(DISTINCT ORDERNUMBER) AS ORDER_COUNT
FROM SALES_DATA
GROUP BY PRODUCTLINE
ORDER BY ORDER_COUNT DESC;     

-- Revenue by deal size
SELECT 
     DEALSIZE,
     ROUND(SUM(SALES),0) AS REVENUE
FROM SALES_DATA
GROUP BY DEALSIZE
ORDER BY REVENUE DESC;        

-- Best month for sales in a year (change year in WHERE clause)
SELECT 
      MONTH_ID AS MONTH,
      SUM(SALES) AS TOTAL_REVENUE,
      COUNT(DISTINCT ORDERNUMBER) AS ORDER_COUNT
FROM SALES_DATA      
WHERE YEAR_ID = 2005 
GROUP BY MONTH_ID
ORDER BY TOTAL_REVENUE DESC;


/*Which product lines generated the highest revenue in october 2003, 
and how many orders were placed for each? */

SELECT 
      PRODUCTLINE,
      SUM(SALES) AS TOTAL_REVENUE,
      COUNT(ORDERNUMBER) AS TOTAL_ORDER_COUNT
FROM SALES_DATA  
WHERE YEAR_ID = 2003 AND MONTH_ID = 10
GROUP BY PRODUCTLINE
ORDER BY TOTAL_ORDER_COUNT;



--  View original ORDERDATE values (stored as string)
SELECT ORDERDATE FROM SALES_DATA LIMIT 5;

-- Convert ORDERDATE to MySQL DATE format using STR_TO_DATE
SELECT STR_TO_DATE(ORDERDATE, '%d/%m/%y') AS `Date` FROM SALES_DATA LIMIT 5;

-- Get first & last order date and total date range in dataset

SELECT 
      MIN(STR_TO_DATE(ORDERDATE, '%d/%m/%y')) AS Earliest_Date,
      MAX(STR_TO_DATE(ORDERDATE, '%d/%m/%y')) AS Latest_Date,
      DATEDIFF(
      MAX(STR_TO_DATE(ORDERDATE, '%d/%m/%y')),
      MIN(STR_TO_DATE(ORDERDATE, '%d/%m/%y'))
      ) AS Days_Between_First_And_Last_Order  -- Calculate the total range (in days) between first and last transaction
FROM SALES_DATA;

--  Create a view for RFM Segmentation
CREATE OR REPLACE VIEW RFM_SEGMENTATION_VIEW AS
WITH CUSTOMER_SUMMARY_TABLE AS (
 -- Step 1: Calculate Recency, Frequency, and Monetary values
  SELECT 
    CUSTOMERNAME,
    DATEDIFF(
      (SELECT MAX(STR_TO_DATE(ORDERDATE, '%d/%m/%y')) FROM SALES_DATA),
      MAX(STR_TO_DATE(ORDERDATE, '%d/%m/%y'))
    ) AS RECENCY_VALUE,
    COUNT(DISTINCT ORDERNUMBER) AS FREQUENCY_VALUE,
    ROUND(SUM(SALES), 0) AS MONETARY_VALUE
  FROM SALES_DATA
  GROUP BY CUSTOMERNAME
),

RFM_SCORE AS (
-- Step 2: Assign RFM scores from 1â€“5 using NTILE
  SELECT 
    *,
    NTILE(5) OVER (ORDER BY RECENCY_VALUE DESC) AS R_SCORE,
    NTILE(5) OVER (ORDER BY FREQUENCY_VALUE ASC) AS F_SCORE,
    NTILE(5) OVER (ORDER BY MONETARY_VALUE ASC) AS M_SCORE
  FROM CUSTOMER_SUMMARY_TABLE
),

RFM_COMBINATION_SCORE AS (
-- Step 3: Combine individual R, F, M scores
  SELECT 
    *,
    (R_SCORE + F_SCORE + M_SCORE) AS TOTAL_RFM_SCORE,
    CONCAT(R_SCORE, F_SCORE, M_SCORE) AS RFM_SCORE_COMBINATION
  FROM RFM_SCORE
)

-- Step 4: Map RFM combinations into segments
SELECT 
  RC.*,
  CASE
    WHEN RFM_SCORE_COMBINATION IN ('555', '554', '545', '544', '554', '553', '543') THEN 'Champions'
    WHEN RFM_SCORE_COMBINATION IN ('445', '454', '355', '344', '443', '535', '453') THEN 'Loyal Customers'
    WHEN RFM_SCORE_COMBINATION IN ('344', '343', '342', '333', '434') THEN 'Potential Loyalists'
    WHEN RFM_SCORE_COMBINATION IN ('322', '323', '332', '233', '243', '242', '224') THEN 'Promising Customers'
    WHEN RFM_SCORE_COMBINATION IN ('213', '214', '223', '232', '221', '222') THEN 'Needs Attention'
    WHEN RFM_SCORE_COMBINATION IN ('111', '112', '113', '122', '121') THEN 'At Risk'
    ELSE 'Others'
  END AS CUSTOMER_SEGMENT
FROM RFM_COMBINATION_SCORE AS RC;

-- Check total score and RFM combination for each customer
SELECT 
  CUSTOMERNAME, 
  TOTAL_RFM_SCORE, 
  RFM_SCORE_COMBINATION
FROM RFM_SEGMENTATION_VIEW;

-- View distinct RFM score combinations
SELECT DISTINCT RFM_SCORE_COMBINATION
FROM RFM_SEGMENTATION_VIEW
ORDER BY RFM_SCORE_COMBINATION;

-- Show customer name with their segment
SELECT 
  CUSTOMERNAME ,
  CASE
    WHEN RFM_SCORE_COMBINATION IN ('555', '554', '545', '544', '554', '553', '543') THEN 'Champions'
    WHEN RFM_SCORE_COMBINATION IN ('445', '454', '355', '344', '443', '535', '453') THEN 'Loyal Customers'
    WHEN RFM_SCORE_COMBINATION IN ('344', '343', '342', '333', '434') THEN 'Potential Loyalists'
    WHEN RFM_SCORE_COMBINATION IN ('322', '323', '332', '233', '243', '242', '224') THEN 'Promising Customers'
    WHEN RFM_SCORE_COMBINATION IN ('213', '214', '223', '232', '221', '222') THEN 'Needs Attention'
    WHEN RFM_SCORE_COMBINATION IN ('111', '112', '113', '122', '121') THEN 'At Risk'
    ELSE 'Others'
  END AS CUSTOMER_SEGMENT
FROM RFM_SEGMENTATION_VIEW;

-- Get customer count per segment
WITH CTE_EXAMPLE AS (
SELECT 
  CUSTOMERNAME ,
  CASE
    WHEN RFM_SCORE_COMBINATION IN ('555', '554', '545', '544', '554', '553', '543') THEN 'Champions'
    WHEN RFM_SCORE_COMBINATION IN ('445', '454', '355', '344', '443', '535', '453') THEN 'Loyal Customers'
    WHEN RFM_SCORE_COMBINATION IN ('344', '343', '342', '333', '434') THEN 'Potential Loyalists'
    WHEN RFM_SCORE_COMBINATION IN ('322', '323', '332', '233', '243', '242', '224') THEN 'Promising Customers'
    WHEN RFM_SCORE_COMBINATION IN ('213', '214', '223', '232', '221', '222') THEN 'Needs Attention'
    WHEN RFM_SCORE_COMBINATION IN ('111', '112', '113', '122', '121') THEN 'At Risk'
    ELSE 'Others'
  END AS CUSTOMER_SEGMENT
FROM RFM_SEGMENTATION_VIEW
)

SELECT CUSTOMER_SEGMENT, COUNT(*) AS NO_OF_CUSTOMERS
FROM CTE_EXAMPLE 
GROUP BY CUSTOMER_SEGMENT
ORDER BY NO_OF_CUSTOMERS DESC;